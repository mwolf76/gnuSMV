/**
 * @file main.cc
 * @brief Program main body
 *
 * Copyright (C) 2012 Marco Pensallorto < marco AT pensallorto DOT gmail DOT com >
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 **/
#include <common.hh>

#include <expr.hh>
#include <expr_printer.hh>

#include <model.hh>
#include <analyzer.hh>

#include <mc.hh>
#include <satbmc.hh>

#include <antlr3.h>
#include <smvLexer.h>
#include <smvParser.h>

// logger configuration, has to be inlined in main
#include "logging.cc"

// options management
#include "opts.hh"

// TODO: proper error handling
static void
parseFile(pANTLR3_UINT8 fName)
{
    pANTLR3_INPUT_STREAM input;
    pANTLR3_COMMON_TOKEN_STREAM tstream;

    psmvParser psr;
    psmvLexer  lxr;

    DEBUG << "Preparing for parsing file '" << fName << "'" << endl;

    input = antlr3AsciiFileStreamNew(fName);
    assert(input);

    lxr = smvLexerNew(input); // smvLexerNew is generated by ANTLR
    assert(lxr);

    tstream = antlr3CommonTokenStreamSourceNew(ANTLR3_SIZE_HINT, TOKENSOURCE(lxr));
    assert(tstream);

    psr = smvParserNew(tstream);  // smvParserNew is generated by ANTLR3
    assert(psr);

    psr->smv(psr);
    INFO << "done." << endl;

    psr->free(psr);
    tstream->free(tstream);
    lxr->free(lxr);
    input->close(input);
}

// these are needed to force linking of modules
extern void link_expr();
extern void link_model();

ostream& operator<<(ostream& os, const Expr_ptr t)
{ Printer (os) << t; return os; }

static void usage()
{
    const string heading = "gnuSMV - A Symbolic model checker";

    cout << heading
         << endl
         << endl
         << OptsMgr::INSTANCE().usage()
         << endl
         << endl ;
}

int main(int argc, const char *argv[])
{
    // hack
    link_expr();

    // parse command line options
    OptsMgr& opts_mgr = OptsMgr::INSTANCE();
    opts_mgr.parse_command_line(argc, argv);
    if (opts_mgr.help()) {
        usage();
        exit(0);
    }

    try {
        const char* fname = opts_mgr.model().c_str();
        if (0 == strlen(fname)) {
            usage();
            exit(0);
        }
        parseFile((pANTLR3_UINT8) fname);

        Printer prn(cout);

        IModel_ptr M = ModelMgr::INSTANCE().get_model();
        Modules mods = M->get_modules();

        Analyzer analyzer;
        analyzer.process();

        SATBMCFalsification alg(*M);
        alg.set_param("k", 10);
        alg.set_param("incremental", true);
        assert(! alg.get_param("incremental").as_boolean());
        // other params...

        alg(); // TODO support for multiprocessing sync, etc...
        if (alg.has_witness()) {
            // const Traces& t = alg.get_traces();

            // maybe print them
        }

        for (Modules::iterator eye = mods.begin(); eye != mods.end(); eye ++ ) {
            IModule_ptr pm = eye->second;
            {
                Module& m = dynamic_cast <Module&> (*pm);
                //      const Expr_ptr module_name = m.expr();

                prn << "Module name: "<< m.expr() << "\n";
                const Variables& svars = m.get_localVars();

                prn << "Variables: " << "\n";
                for (Variables::const_iterator veye = svars.begin();
                     veye != svars.end(); veye ++ ) {

                    IVariable* tmp = veye->second;

                    if (StateVar* vp = dynamic_cast<StateVar*> (tmp) ){
                        const StateVar& v = (*vp);
                        prn << v.expr(); cout << endl;
                    }
                }
            }
        }
    }

    catch(Exception& e) {
        cerr << "error: " << e.what() << "\n";
        return 1;
    }

    return 0;
}
