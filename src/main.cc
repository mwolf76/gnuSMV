/**
 * @file main.cc
 * @brief Program main body
 *
 * Copyright (C) 2012 Marco Pensallorto < marco AT pensallorto DOT gmail DOT com >
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 **/

#include <common.hh>

#include <expr.hh>
#include <expr_printer.hh>

#include <model.hh>
#include <analyzer.hh>

#include <mc.hh>
#include <satbmc.hh>

#include <antlr3.h>
#include <smvLexer.h>
#include <smvParser.h>

// logger configuration, has to be inlined in main
#include "logging.cc"

#include <boost/program_options.hpp>
namespace options = boost::program_options;

static void
parseFile(pANTLR3_UINT8 fName)
{
    pANTLR3_INPUT_STREAM input;
    pANTLR3_COMMON_TOKEN_STREAM tstream;

    psmvParser psr;
    psmvLexer  lxr;

    logger << "Preparing for parsing..." << endl;

    input = antlr3AsciiFileStreamNew(fName);
    assert(input);

    lxr = smvLexerNew(input); // smvLexerNew is generated by ANTLR
    assert(lxr);

    tstream = antlr3CommonTokenStreamSourceNew(ANTLR3_SIZE_HINT, TOKENSOURCE(lxr));
    assert(tstream);

    psr = smvParserNew(tstream);  // smvParserNew is generated by ANTLR3
    assert(psr);

    psr->smv(psr);
    logger << "done." << endl;

    psr->free(psr);
    tstream->free(tstream);
    lxr->free(lxr);
    input->close(input);
}

// these are needed to force linking of modules
extern void link_expr();
extern void link_model();

ostream& operator<<(ostream& os, const Expr_ptr t)
{ Printer (os) << t; return os; }

int main(int argc, char *argv[])
{
    // hack
    link_expr();

    try {
        options::options_description desc("Allowed options");
        desc.add_options()
            ("help", "produce help message")
            ("verbosity", options::value<int>(), "set verbosity level")
            ;

        options::variables_map vm;
        options::store(options::parse_command_line(argc, argv, desc), vm);
        options::notify(vm);

        if (vm.count("help")) {
            cout << desc << "\n";
            return 0;
        }

        if (vm.count("verbosity")) {
            cout << "Verbosity level was set to "
                 << vm["verbosity"].as<int>() << ".\n";
        } else {
            cout << "Verbosity level was not set.\n";
        }

        return 0;

        //   const char* fname = argv[1];
        //   parseFile((pANTLR3_UINT8) fname);

        //   Printer prn(cout);

        //   IModel_ptr M = ModelMgr::INSTANCE().get_model();
        //   Modules mods = M->get_modules();

        //   Analyzer analyzer;
        //   analyzer.process();

        //   SATBMCFalsification alg(*M);
        //   alg.set_param("k", 10);
        //   alg.set_param("incremental", true);
        //   assert(! alg.get_param("incremental").as_boolean());
        //   // other params...

        //   alg(); // TODO support for multiprocessing sync, etc...
        //   if (alg.has_witness()) {
        //     const Traces& t = alg.get_traces();

        //     // maybe print them
        //   }

        //   // for (Modules::iterator eye = mods.begin(); eye != mods.end(); eye ++ ) {
        //   //   IModule_ptr pm = eye->second;
        //   //   {
        //   //     Module& m = dynamic_cast <Module&> (*pm);
        //   //     //      const Expr_ptr module_name = m.expr();

        //   //     prn << "Module name: "<< m.expr() << "\n";
        //   //     const Variables& svars = m.get_localVars();

        //   //     prn << "Variables: " << "\n";
        //   //     for (Variables::const_iterator veye = svars.begin();
        //   //          veye != svars.end(); veye ++ ) {

        //   //       IVariable* tmp = veye->second;

        //   //       if (StateVar* vp = dynamic_cast<StateVar*> (tmp) ){
        //   //         const StateVar& v = (*vp);
        //   //         prn << v.expr(); cout << endl;
        //   //       }
        //   //     }
        //   //   }
        //   // }
    }

    catch(Exception& e) {
        cerr << "error: " << e.what() << "\n";
        return 1;
    }

    catch(...) {
        cerr << "Exception of unknown type!\n";
    }

    return 0;
}
