.\"                                      Hey, EMACS: -*- nroff -*-
.\" First parameter, NAME, should be all caps
.\" Second parameter, SECTION, should be 1-8, maybe w/ subsection
.\" other parameters are allowed: see man(7), man(1)
.TH YASMV 1 "December 26, 2016"
.\" Please adjust this date whenever revising the manpage.
.\"
.\" Some roff macros, for reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify to both left and right margins
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        insert line break
.\" .sp <n>    insert n+1 empty lines
.\" for manpage-specific macros, see man(7)
.SH NAME
yasmv \- Yet Another Symbolic Model Verifier
.SH SYNOPSIS
.B yasmv
.RI [ options ] " smv-model "
.PP
.B yasmv
takes as input an FSM representational model written in a dialect of
the SMV language. Refer to section
.B LANGUAGE
below for more information about the the SMV language understood by
.B yasmv
.PP
.SH DESCRIPTION
This manual page documents briefly the
.B yasmv
command.
.B yasmv
is an interactive symbolic logic reasoning tool and in its current state, it can be used to
perform complete reachability analysis and step-by-step interactive simulation.
.PP
.SH OPTIONS
.TP
.B \-\-help
Show built-in usage documentation.
.TP
.B \-\-color
Enable colorized output in interactive shell.
.TP
.B \-\-verbosity={0..3}
Set the verbosity of informational and debugging output (set to 0 for silent, defaults to 1)
.TP
.B \-\-word-width={1..64}
Set the native word width for bitvector types (can be overridden by the 
.B word-width 
directive, defaults to 16).
.PP
.SH LANGUAGE
.TP
.B yasmv
understands a dialect of the smv language.  Programs in the smv
language consist of one or more modules, each one consisting of a
number of variable declarations (see section
.B TYPES
below)

.SH SCRIPTING
.TP
.B yasmv
includes a basic scripting language that can be used to implement simple control flow [...]
.SH EXAMPLES
.TP
$ yasmv /usr/share/yasmv/doc/examples/ferryman/ferryman.smv < /usr/share/yasmv/doc/examples/ferryman/commands
.PP
.nf
YASMV - Yet Another Symbolic Model Verifier
(c) 2011-2016, Marco Pensallorto < marco DOT pensallorto AT gmail DOT com >
https://github.com/mwolf76/yasmv

[Mon Dec 26 14:56:03 2016].256 src/main.cc:177 :: 2176 microcode fragments registered.

<< Ok
>> reach GOAL

<< Target is reachable, registered witness `reach_1`, 8 steps.
>> dump-trace
Witness: reach_1 [[ Reachability witness for target `GOAL` in module `ferryman` ]]
:: @0
-- state
   ferryman = WEST
   goat = WEST
   cabbage = WEST
   wolf = WEST
   carry = NIL

:: @1
-- state
   ferryman = EAST
   goat = EAST
   cabbage = WEST
   wolf = WEST
   carry = GOAT

:: @2
-- state
   ferryman = WEST
   goat = EAST
   cabbage = WEST
   wolf = WEST
   carry = NIL

:: @3
-- state
   ferryman = EAST
   goat = EAST
   cabbage = EAST
   wolf = WEST
   carry = CABBAGE

:: @4
-- state
   ferryman = WEST
   goat = WEST
   cabbage = EAST
   wolf = WEST
   carry = GOAT

:: @5
-- state
   ferryman = EAST
   goat = WEST
   cabbage = EAST
   wolf = EAST
   carry = WOLF

:: @6
-- state
   ferryman = WEST
   goat = WEST
   cabbage = EAST
   wolf = EAST
   carry = NIL

:: @7
-- state
   ferryman = EAST
   goat = EAST
   cabbage = EAST
   wolf = EAST
   carry = GOAT


<< Ok
>> time

<< Session time: <1s.
>> quit

<< Bye
.fi
.PP
.SH AUTHOR
.B yasmv 
was written by Marco Pensallorto
.PP
This manual page was written by Marco Pensallorto <marco.pensallorto@gmail.com>
for the Debian project (but may be used by others).
