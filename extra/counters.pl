#!/usr/bin/perl -w
use strict;

use Getopt::Long;
use Pod::Usage;

Getopt::Long::Configure("bundling"); #allow -optVALUE whithout spaces

# debug
my $debug = 0;

# avoid verbose output
my $quiet = 0;

my $help = 0;

my $default_bits = 4;
my $bits = $default_bits;

my $filename;

# signal handling
sub catch {
    my $signame = shift;
    print "Caught SIG${signame}";
}
$SIG{USR1} = \&catch;

my $usage = <<EOT;
counters.pl - (c) Marco Pensallorto 2011.
Instantiates a N bits counter as a SMV model.

usage:
    counters.pl [-n] [-q] <filename>
    -n    number of bits (default is $default_bits)
    -q    be quiet.

EOT

    GetOptions
    (
    "q"  => \$quiet,

    "d"  => \$debug,

    "n=s" =>
    sub {
        my $tmp = $_[1];
        die "$tmp is not valid numeric number" unless (0 <= $tmp);

        $bits = $tmp;
        print "setting number of queens: $bits" ."\n" unless $quiet;
    },

    "h" => \$help
    ) or die $usage;

# usage message
pod2usage({-exitval => 1, -verbose => 1, -output => \*STDOUT, -message => $usage}) if @ARGV < 1 || $help;

sub varname ($)
{
    my ($i) = @_;
    return "x$i";
}

sub process($$)
{
    my ($bits, $output) = @_;

    open (SMV, ">$output");
    print "-- creating output file $output\n" unless $quiet;

    print SMV "-- This SMV model was autogenerated by counters.pl on ".`date`;
    print SMV "MODEL counters_$bits\n\n";
    print SMV "MODULE main\n\n";

    # var decls
    print SMV "-- variable declarations\n";
    print SMV "VAR ". join (", ", map { varname($_) }  (0..$bits -1) ) . ": boolean;\n";

    # INIT
    print SMV "\n-- Initial state constraints\nINIT\n";
    for (my $i = 0; $i < $bits; $i ++) {
        print SMV "\t! " . varname($i) . ";\n";
    }

    # TRANS
    print SMV "\n-- Transition relation\nTRANS\n";
    for (my $i = 0; $i < $bits; $i ++) {
        my $cond = ($i > 0) ? join (" & ", map { varname($_) } 0..$i -1 ) : "TRUE";
        print SMV "\tnext(" . varname($i) . ") <-> ($cond) ? !".varname($i). " : ".varname($i). ";\n";
    }

    print SMV "\n-- Counting limit\nDEFINE phi := ";
    print SMV join (" & ", map { varname($_) }  (0..$bits -1) ) . ";\n";
}

$filename = $ARGV[0];
print "output file: $filename" . "\n" unless $quiet;

process($bits, $filename);

exit 0;
